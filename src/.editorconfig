# A handy plugin to get intellisense and easy alignment of values...
# https://marketplace.visualstudio.com/items?itemName=MadsKristensen.EditorConfig

###############################
# Core EditorConfig Options   #
###############################

root = true

# All files
[*]
indent_style = space

# Code files
[*.{cs,csx,vb,vbx}]
indent_size          = 4
insert_final_newline = true
charset              = utf-8-bom

###############################
# .NET Coding Conventions     #
###############################

[*.{cs,vb}]
# Organize usings
dotnet_sort_system_directives_first                                       = true
dotnet_separate_import_directive_groups                                   = false

# this. preferences
dotnet_style_qualification_for_field                                      = false : silent
dotnet_style_qualification_for_property                                   = false : silent
dotnet_style_qualification_for_method                                     = false : silent
dotnet_style_qualification_for_event                                      = false : silent

# Language keywords vs BCL types preferences
dotnet_style_predefined_type_for_locals_parameters_members                = true : silent
dotnet_style_predefined_type_for_member_access                            = true : silent

# Parentheses preferences
dotnet_style_parentheses_in_arithmetic_binary_operators                   = always_for_clarity : silent
dotnet_style_parentheses_in_relational_binary_operators                   = always_for_clarity : silent
dotnet_style_parentheses_in_other_binary_operators                        = always_for_clarity : silent
dotnet_style_parentheses_in_other_operators                               = never_if_unnecessary : silent

# Modifier preferences
dotnet_style_require_accessibility_modifiers                              = for_non_interface_members : silent
dotnet_style_readonly_field                                               = true : suggestion

# Expression-level preferences
dotnet_style_object_initializer                                           = true : suggestion
dotnet_style_collection_initializer                                       = true : suggestion
dotnet_style_explicit_tuple_names                                         = true : suggestion
dotnet_style_null_propagation                                             = true : suggestion
dotnet_style_coalesce_expression                                          = true : suggestion
dotnet_style_prefer_is_null_check_over_reference_equality_method          = true : silent
dotnet_style_prefer_inferred_tuple_names                                  = true : suggestion
dotnet_style_prefer_inferred_anonymous_type_member_names                  = true : suggestion
dotnet_style_prefer_auto_properties                                       = true : silent
dotnet_style_prefer_conditional_expression_over_assignment                = true : silent
dotnet_style_prefer_conditional_expression_over_return                    = true : silent

###############################
# Naming Conventions          #
###############################

# const fields should be pascal cased
dotnet_naming_symbols.constant_fields.applicable_kinds                    = field
dotnet_naming_symbols.constant_fields.required_modifiers                  = const

dotnet_naming_style.pascal_case_style.capitalization                      = pascal_case

dotnet_naming_rule.constant_fields_should_be_pascal_case.severity         = suggestion
dotnet_naming_rule.constant_fields_should_be_pascal_case.symbols          = constant_fields
dotnet_naming_rule.constant_fields_should_be_pascal_case.style            = pascal_case_style



# private fields should be camel cased.
dotnet_naming_symbols.private_field_symbol.applicable_kinds               = field
dotnet_naming_symbols.private_field_symbol.applicable_accessibilities     = private

dotnet_naming_style.private_field_style.capitalization                    = camel_case

dotnet_naming_rule.private_fields_are_camel_case.severity                 = suggestion
dotnet_naming_rule.private_fields_are_camel_case.symbols                  = private_field_symbol
dotnet_naming_rule.private_fields_are_camel_case.style                    = private_field_style



# non-private fields should be pascal cased
dotnet_naming_symbols.non_private_field_symbol.applicable_kinds           = field
dotnet_naming_symbols.non_private_field_symbol.applicable_accessibilities = public,internal,friend,protected,protected_internal,protected_friend

dotnet_naming_style.non_private_field_style.capitalization                = pascal_case

dotnet_naming_rule.non_private_fields_are_pascal_case.severity            = suggestion
dotnet_naming_rule.non_private_fields_are_pascal_case.symbols             = non_private_field_symbol
dotnet_naming_rule.non_private_fields_are_pascal_case.style               = non_private_field_style



# parameters should be camel cased
dotnet_naming_symbols.parameter_symbol.applicable_kinds                   = parameter

dotnet_naming_style.parameter_style.capitalization                        = camel_case

dotnet_naming_rule.parameters_are_camel_case.severity                     = suggestion
dotnet_naming_rule.parameters_are_camel_case.symbols                      = parameter_symbol
dotnet_naming_rule.parameters_are_camel_case.style                        = parameter_style



# type symbols (except interfaces) should be pascal cased
dotnet_naming_symbols.non_interface_type_symbol.applicable_kinds          = class,struct,enum,delegate

dotnet_naming_style.non_interface_type_style.capitalization               = pascal_case

dotnet_naming_rule.non_interface_types_are_pascal_case.severity           = suggestion
dotnet_naming_rule.non_interface_types_are_pascal_case.symbols            = non_interface_type_symbol
dotnet_naming_rule.non_interface_types_are_pascal_case.style              = non_interface_type_style



# interface symbol should be prefixed with I and pascal cased
dotnet_naming_symbols.interface_type_symbol.applicable_kinds              = interface

dotnet_naming_style.interface_type_style.capitalization                   = pascal_case
dotnet_naming_style.interface_type_style.required_prefix                  = I

dotnet_naming_rule.interface_types_must_be_prefixed_with_I.severity       = suggestion
dotnet_naming_rule.interface_types_must_be_prefixed_with_I.symbols        = interface_type_symbol
dotnet_naming_rule.interface_types_must_be_prefixed_with_I.style          = interface_type_style



# member symbols should be pascal cased
dotnet_naming_symbols.member_symbol.applicable_kinds                      = method,property,event

dotnet_naming_style.member_style.capitalization                           = pascal_case

dotnet_naming_rule.members_are_pascal_case.severity                       = suggestion
dotnet_naming_rule.members_are_pascal_case.symbols                        = member_symbol
dotnet_naming_rule.members_are_pascal_case.style                          = member_style



# internal and private fields should be camelCase and prefixed with _ (this goes against MS guidelines but is more popular)
dotnet_naming_rule.camel_case_for_private_internal_fields.severity        = suggestion
dotnet_naming_rule.camel_case_for_private_internal_fields.symbols         = private_internal_fields
dotnet_naming_rule.camel_case_for_private_internal_fields.style           = camel_case_underscore_style

dotnet_naming_symbols.private_internal_fields.applicable_kinds            = field
dotnet_naming_symbols.private_internal_fields.applicable_accessibilities  = private, internal

dotnet_naming_style.camel_case_underscore_style.required_prefix           = _
dotnet_naming_style.camel_case_underscore_style.capitalization            = camel_case


###############################
# C# Code Style Rules         #
###############################

[*.cs]
# var preferences
csharp_style_var_for_built_in_types                                      = true : silent
csharp_style_var_when_type_is_apparent                                   = true : silent
csharp_style_var_elsewhere                                               = true : silent

# Expression-bodied members
csharp_style_expression_bodied_methods                                   = false : silent
csharp_style_expression_bodied_constructors                              = false : silent
csharp_style_expression_bodied_operators                                 = false : silent
csharp_style_expression_bodied_properties                                = true : silent
csharp_style_expression_bodied_indexers                                  = true : silent
csharp_style_expression_bodied_accessors                                 = true : silent

# Pattern-matching preferences
csharp_style_pattern_matching_over_is_with_cast_check                    = true : suggestion
csharp_style_pattern_matching_over_as_with_null_check                    = true : suggestion

# Null-checking preferences
csharp_style_throw_expression                                            = true : suggestion
csharp_style_conditional_delegate_call                                   = true : suggestion

# Modifier preferences
csharp_preferred_modifier_order                                          = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async : suggestion

# Expression-level preferences
csharp_prefer_braces                                                     = true : silent
csharp_style_deconstructed_variable_declaration                          = true : suggestion
csharp_prefer_simple_default_expression                                  = true : suggestion
csharp_style_pattern_local_over_anonymous_function                       = true : suggestion
csharp_style_inlined_variable_declaration                                = true : suggestion

###############################
# C# Formatting Rules         #
###############################

# New line preferences
csharp_new_line_before_open_brace                                        = all
csharp_new_line_before_else                                              = true
csharp_new_line_before_catch                                             = true
csharp_new_line_before_finally                                           = true
csharp_new_line_before_members_in_object_initializers                    = true
csharp_new_line_before_members_in_anonymous_types                        = true
csharp_new_line_between_query_expression_clauses                         = true

# Indentation preferences
csharp_indent_case_contents                                              = true
csharp_indent_switch_labels                                              = true
csharp_indent_labels                                                     = flush_left

# Space preferences
csharp_space_after_cast                                                  = false
csharp_space_after_keywords_in_control_flow_statements                   = true
csharp_space_between_method_call_parameter_list_parentheses              = false
csharp_space_between_method_declaration_parameter_list_parentheses       = false
csharp_space_between_parentheses                                         = false
csharp_space_before_colon_in_inheritance_clause                          = true
csharp_space_after_colon_in_inheritance_clause                           = true
csharp_space_around_binary_operators                                     = before_and_after
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis            = false
csharp_space_between_method_call_empty_parameter_list_parentheses        = false
csharp_space_after_comma                                                 = true
csharp_space_after_dot                                                   = false

# Wrapping preferences
csharp_preserve_single_line_statements                                   = true
csharp_preserve_single_line_blocks                                       = true

# RCS1158: Static member in generic type should use a type parameter.
dotnet_diagnostic.RCS1158.severity = warning
